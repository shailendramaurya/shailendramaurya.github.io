---
import { urlFromBase } from "@lib/utils";
import { frontmatter as Selfie } from "@/about.md";

const { pageTitle } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href={Selfie.favicon} />
  <link
    rel="preload"
    href={urlFromBase(base, "/fonts/HackDejavu.woff2")}
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link
    rel="preload"
    href={urlFromBase(base, "/fonts/HackDejavuBold.woff2")}
    as="font"
    type="font/woff2"
    crossorigin
  />
  <link
    rel="preload"
    href={urlFromBase(base, "/fonts/HackDejavuItalic.woff2")}
    as="font"
    type="font/woff2"
    crossorigin
  />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <title>{pageTitle}</title>
  <script src="@/scripts/animate.ts"></script>
  <script is:inline>
    MathJax = {
      tex: {
        inlineMath: [
          ["$", "$"],
          ["\\(", "\\)"],
        ],
      },
      svg: {
        fontCache: "global",
      },
    };
  </script>
  <script
    is:inline
    id="MathJax-script"
    async
    src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
  <script is:inline>
    function init() {
      preloadTheme();

      const lightThemeButton = document.getElementById("light-theme-button");
      lightThemeButton?.addEventListener("click", () => {
        localStorage.setItem("theme", "light");
        toggleTheme(false);
      });

      const darkThemeButton = document.getElementById("dark-theme-button");
      darkThemeButton?.addEventListener("click", () => {
        localStorage.setItem("theme", "dark");
        toggleTheme(true);
      });

      const systemThemeButton = document.getElementById("system-theme-button");

      systemThemeButton?.addEventListener("click", () => {
        localStorage.setItem("theme", "system");
        toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
      });

      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", (event) => {
          if (localStorage.theme === "system") {
            toggleTheme(event.matches);
          }
        });
    }

    function toggleTheme(dark) {
      const css = document.createElement("style");
      const img = document.querySelector("#avatar");
      css.appendChild(
        document.createTextNode(
          `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
        ),
      );

      document.head.appendChild(css);

      if (dark) {
        document.documentElement.classList.add("dark");
        if(img){img.src="/images/avatar-dark.png";}
      } else {
        document.documentElement.classList.remove("dark");
        if(img){img.src="/images/avatar.jpeg";}
      }

      window.getComputedStyle(css).opacity;
      document.head.removeChild(css);
    }

    function preloadTheme() {
      const userTheme = localStorage.theme;

      if (userTheme === "light" || userTheme === "dark") {
        toggleTheme(userTheme === "dark");
      } else {
        toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
      }
    }

    document.addEventListener("DOMContentLoaded", () => init());
    document.addEventListener("astro:after-swap", () => init());
    preloadTheme();
  </script>
</head>
